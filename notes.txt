//let asmbly = r#"
// DATA R1, 2
// JMPIFA 3
// DATA R2, 3
// ADD R1, R2
// PRNT R2
// DATA R1, 10
// ADD R1, R2
// PRNT R2
// CLF
// "#;

// let asmbly = r#"
// DATA R1, 2
// DATA R2, 3
// ADD R1, R2
// PRNT R2
// "#;

// fn parse_number(s:&str) -> u8 {
//     let mut out: u8 = 0;
//     // minus one for zero index?
//     let mut num_chars = s.len();
//     let base = 10;
//
//     for c in s.chars() {
//         let n = match c {
//             '0' => 0,
//             '1' => 1,
//             '2' => 2,
//             '3' => 3,
//             '4' => 4,
//             '5' => 5,
//             '6' => 6,
//             '7' => 7,
//             '8' => 8,
//             '9' => 9,
//             _ => todo!()
//         };
//
//         // ???
//         // 100 = 1
//         // len = 3 base = 10 num = 1
//         out += u8::pow(base, (num_chars - 1) as u32) * n;
//         num_chars -= 1;
//     }
//
//     out
//
// }
// let v = parse_number("10");
// println!("v:{}", v);


// let asmbly = r#"
// DATA R1, 0x00
// DATA R2, 0xff
// ST R1, R2
// LD R1, R1
// "#;

// let asmbly = r#"
// DATA R1, 0x00
// INC R1
// INC R1
// INC R1c
// DEC R1
// DEC R1
// "#;

// let asmbly = r#"
// STOP:
// DATA R1, 0x01
// DATA R2, 0x10
// JMPZ $STOP
// "#;

// let asmbly = r#"
// START:
//     DATA R1, 2
//     DATA R2, 2
//     DATA R4, 2
//     DATA R3, 1
// ADDER:
//     ADD R1, R2
//     CMP R4, R3
//     JMPIFZ $END
//     DEC R4
//     JMP $ADDER
// END:
//     HLT
// "#;
